# Generated by Django 5.2.1 on 2025-05-21 12:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text="Prénom de l'artiste", max_length=60, verbose_name='Prénom')),
                ('last_name', models.CharField(help_text="Nom de l'artiste", max_length=60, verbose_name='Nom')),
            ],
            options={
                'verbose_name': 'Artiste',
                'verbose_name_plural': 'Artistes',
                'db_table': 'artists',
                'ordering': ['last_name', 'first_name'],
                'constraints': [models.UniqueConstraint(fields=('first_name', 'last_name'), name='unique_artist_name')],
            },
        ),
        migrations.CreateModel(
            name='ArtistType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artist', models.ForeignKey(help_text='Artiste concerné', on_delete=django.db.models.deletion.CASCADE, related_name='artiste_type', to='catalogue.artist', verbose_name='Artiste')),
            ],
            options={
                'verbose_name': 'Association artiste/type',
                'verbose_name_plural': 'Associations artiste/type',
                'db_table': 'artiste_type',
            },
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postal_code', models.CharField(help_text='Code postal de la localité', max_length=6, verbose_name='Code postal')),
                ('locality', models.CharField(help_text='Nom de la localité', max_length=60, verbose_name='Localité')),
            ],
            options={
                'verbose_name': 'Localité',
                'verbose_name_plural': 'Localités',
                'db_table': 'localities',
                'ordering': ['postal_code', 'locality'],
                'constraints': [models.UniqueConstraint(fields=('postal_code', 'locality'), name='unique_postal_code_locality')],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text="Identifiant unique dans l'URL", max_length=60, unique=True, verbose_name='Slug')),
                ('designation', models.CharField(help_text='Nom du lieu (ex : Théâtre Royal)', max_length=100, verbose_name='Désignation')),
                ('address', models.CharField(help_text='Rue et numéro complet', max_length=255, verbose_name='Adresse')),
                ('website', models.CharField(blank=True, max_length=255, null=True, verbose_name='Site web')),
                ('phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Téléphone')),
                ('locality', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='locations', to='catalogue.locality', verbose_name='Localité')),
            ],
            options={
                'verbose_name': 'Lieu',
                'verbose_name_plural': 'Lieux',
                'db_table': 'locations',
                'ordering': ['designation'],
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='Ex : Enfant, Étudiant, Senior', max_length=30, verbose_name='Type de tarif')),
                ('price', models.DecimalField(decimal_places=2, help_text='Prix du billet (ex : 12.00)', max_digits=10, verbose_name='Montant (€)')),
                ('start_date', models.DateField(verbose_name='Début de validité')),
                ('end_date', models.DateField(verbose_name='Fin de validité')),
            ],
            options={
                'verbose_name': 'Tarif',
                'verbose_name_plural': 'Tarifs',
                'db_table': 'prices',
                'ordering': ['type'],
                'constraints': [models.UniqueConstraint(fields=('type', 'price', 'start_date', 'end_date'), name='unique_price_type_date_range')],
            },
        ),
        migrations.CreateModel(
            name='Representation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule', models.DateTimeField(help_text='Horaire de la représentation', verbose_name='Date et heure')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='representations', to='catalogue.location', verbose_name='Lieu')),
            ],
            options={
                'verbose_name': 'Représentation',
                'verbose_name_plural': 'Représentations',
                'db_table': 'representations',
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_date', models.DateTimeField(auto_now_add=True, verbose_name='Date de réservation')),
                ('status', models.CharField(choices=[('ouverte', 'Ouverte'), ('complète', 'Complète'), ('expirée', 'Expirée')], default='ouverte', max_length=10, verbose_name='Statut')),
                ('representation', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='reservations', to='catalogue.representation', verbose_name='Représentation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='reservations', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Réservation',
                'verbose_name_plural': 'Réservations',
                'db_table': 'reservations',
                'ordering': ['-booking_date'],
            },
        ),
        migrations.CreateModel(
            name='RepresentationReservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(help_text='Nombre de places réservées à ce tarif', verbose_name='Quantité')),
                ('price', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='representation_usages', to='catalogue.price', verbose_name='Tarif')),
                ('representation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='representation_reservations', to='catalogue.representation', verbose_name='Représentation')),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='representation_items', to='catalogue.reservation', verbose_name='Réservation')),
            ],
            options={
                'verbose_name': 'Détail de réservation',
                'verbose_name_plural': 'Détails de réservations',
                'db_table': 'representation_reservations',
            },
        ),
        migrations.CreateModel(
            name='Show',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, help_text="Identifiant unique dans l'URL", max_length=60, unique=True, verbose_name='Slug')),
                ('title', models.CharField(max_length=255, verbose_name='Titre du spectacle')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('poster_url', models.CharField(blank=True, max_length=255, null=True, verbose_name='Affiche (URL)')),
                ('duration', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Durée (min)')),
                ('created_in', models.PositiveSmallIntegerField(verbose_name='Année de création')),
                ('bookable', models.BooleanField(default=True, verbose_name='Réservable')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shows', to='catalogue.location', verbose_name='Lieu')),
            ],
            options={
                'verbose_name': 'Spectacle',
                'verbose_name_plural': 'Spectacles',
                'db_table': 'shows',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], verbose_name='Note')),
                ('comment', models.TextField(blank=True, verbose_name='Commentaire')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('show', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='catalogue.show', verbose_name='Films')),
            ],
            options={
                'verbose_name': 'Avis',
                'verbose_name_plural': 'Avis',
                'db_table': 'reviews',
                'ordering': ['-show__title'],
            },
        ),
        migrations.AddField(
            model_name='representation',
            name='show',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='representations', to='catalogue.show', verbose_name='Spectacle'),
        ),
        migrations.CreateModel(
            name='ArtistTypeShow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artist_type', models.ForeignKey(help_text='Association artiste/type', on_delete=django.db.models.deletion.CASCADE, related_name='shows', to='catalogue.artisttype', verbose_name='Artiste + Type')),
                ('show', models.ForeignKey(help_text='Spectacle concerné', on_delete=django.db.models.deletion.CASCADE, related_name='artiste_type_links', to='catalogue.show', verbose_name='Spectacle')),
            ],
            options={
                'verbose_name': 'Participation artistique',
                'verbose_name_plural': 'Participations artistiques',
                'db_table': 'artiste_type_show',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nom du type de rôle', max_length=60, verbose_name='Nom')),
            ],
            options={
                'verbose_name': 'Type',
                'verbose_name_plural': 'Types',
                'db_table': 'types',
                'ordering': ['name'],
                'constraints': [models.UniqueConstraint(fields=('name',), name='unique_type_name')],
            },
        ),
        migrations.AddField(
            model_name='artisttype',
            name='type',
            field=models.ForeignKey(help_text='Type associé', on_delete=django.db.models.deletion.CASCADE, related_name='artiste_type', to='catalogue.type', verbose_name='Type'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.UniqueConstraint(fields=('slug', 'website'), name='unique_location_slug_website'),
        ),
        migrations.AlterUniqueTogether(
            name='reservation',
            unique_together={('user', 'representation')},
        ),
        migrations.AlterUniqueTogether(
            name='representationreservation',
            unique_together={('representation', 'reservation', 'price')},
        ),
        migrations.AddConstraint(
            model_name='show',
            constraint=models.UniqueConstraint(fields=('slug', 'created_in'), name='unique_show_slug_year'),
        ),
        migrations.AddConstraint(
            model_name='representation',
            constraint=models.UniqueConstraint(fields=('show', 'schedule'), name='unique_show_schedule'),
        ),
        migrations.AddConstraint(
            model_name='artisttypeshow',
            constraint=models.UniqueConstraint(fields=('artist_type', 'show'), name='unique_artist_type_show'),
        ),
        migrations.AddConstraint(
            model_name='artisttype',
            constraint=models.UniqueConstraint(fields=('artist', 'type'), name='unique_artist_type'),
        ),
    ]
